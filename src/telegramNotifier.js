const TelegramBot = require('node-telegram-bot-api');

class TelegramNotifier {
  constructor(token, chatId) {
    this.bot = new TelegramBot(token, { polling: false });
    this.chatId = chatId;
  }

  async sendTransactionNotification(incomeAmount, expenseAmount, balance) {
    const timestamp = new Date().getTime();
    const timestampWithOffset = timestamp + (60 * 60 * 1000);
    const formattedTime = new Date(timestampWithOffset).toLocaleTimeString();

    let message = '';
    
    if (incomeAmount) {
      message = `üü© –ù–æ–≤–∞—è –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n–°—É–º–º–∞: ${incomeAmount} USDT\n–í—Ä–µ–º—è: ${formattedTime}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} USDT`;
    } else if (expenseAmount) {
      message = `üü• –ù–æ–≤–∞—è –∏—Å—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n–°—É–º–º–∞: ${expenseAmount} USDT\n–í—Ä–µ–º—è: ${formattedTime}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} USDT`;
    }

    try {
      await this.bot.sendMessage(this.chatId, message, { parse_mode: 'Markdown' });
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }
}

module.exports = TelegramNotifier;


